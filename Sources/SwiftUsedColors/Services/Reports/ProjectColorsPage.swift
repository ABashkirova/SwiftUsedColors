//
//  Created by Alexandra Bashkirova on 05.08.2021.
//

import Foundation
import HyperSwift

class ProjectColorsPage {
    private let title: String
    private let head: Head
    private let colors: [ProjectColor]
    
    init(colors: [ProjectColor]) {
        let title = "Project Colors"
        self.title = title
        self.head = Head(title: title)
        self.colors = colors
    }
    
    func render() -> String {
        let body = Div("container") {
            Div("row row-cols-1") {
                colors.map { color in
                    Div("col") {
                        color.infoCard
                    }
                }
            }
        }
        .display(.grid)
        .overflow(.scroll)
        return """
        <!DOCTYPE html>
        <html lang="en">
           \(head.render())
           <body style="margin: 0; background-color: #FFFFFF;">
               \(body.render())
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj" crossorigin="anonymous"></script>
           </body>
        </html>
        """
    }
}

public class Head {
    let title: String
    
    init(title: String) {
        self.title = title
    }
    
    func render() -> String {
        """
        <head>
            <!-- Required meta tags -->
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">

            <!-- Bootstrap CSS -->
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" crossorigin="anonymous">

            <title>\(title)</title>
            <meta name="description" content="Colors generated by SUC">
        </head>
        """
    }
}

private extension ProjectColor {
    var infoCard: HTMLComponent {
        let colorBlock = Div("col-sm-4 align-self-center") {
            colorRepresentation?.colorsCard ?? Div()
        }
        let nameBlock = Div("col-md-3") {
            Div(cssClass: "card-body", id: nil, attributes: [:], children: [
                Header(.h6, text: "Names:", cssClass: "card-title", attributes: [:]),
                Paragraph("card-text") {
                    Small {
                        names?.joined(separator: ", ") ?? ""
                    }
                }
            ])
        }
        let filesBlock = Div("col-md-3") {
            Div(cssClass: "card-body", id: nil, attributes: [:], children: [
                Header(.h6, text: "Files:", cssClass: "card-title", attributes: [:]),
                Paragraph("card-text") {
                    Small {
                        usedInFiles?.compactMap { $0.lastComponent }.joined(separator: ", ") ?? ""
                    }
                }
            ])
        }
        let assetBadge = RawHTML("<span class=\"badge rounded-pill bg-success\">In Asset</span>")
        let xibBadge = RawHTML("<span class=\"badge rounded-pill bg-danger\">In Xib</span>")
        let swiftBadge = RawHTML("<span class=\"badge rounded-pill bg-warning\">In Code</span>")
        
        var childBlocks: [HTMLElement] = [colorBlock, nameBlock, filesBlock]
        if isAsset {
            childBlocks.append(Div("col-md-1 align-self-top") { assetBadge })
        }
        else {
            if isUsedInCode  {
                childBlocks.append(Div("col-md-1 align-self-top") { swiftBadge })
            }
            if isUsedInXib {
                childBlocks.append(Div("col-md-1 align-self-top") { xibBadge })
            }
        }
        return Div("card mb-4") {
            Div("row g-0", id: nil, attributes: [:]) {
                return childBlocks
            }
        }
    }
}

private extension ProjectColor.ColorRepresentation {
    var colorsCard: AppereanceColorCard {
        switch self {
        case .asset(let color):
            return AppereanceColorCard(color: color)
        
        case .custom(let color):
            return AppereanceColorCard(
                colorCards: [
                    ColorCard(color: color, isLight: true),
                    ColorCard(color: color, isLight: false)
                ]
            )
        case .system(let name, let alpha):
            return AppereanceColorCard(
                colorCards: [
                    ColorCard(system: name, hex: hex(isLightMode: true), alpha: alpha, isLight: true),
                    ColorCard(system: name, hex: hex(isLightMode: false), alpha: alpha,  isLight: false)
                ]
            )
        }
    }
}

private class AppereanceColorCard: HTMLComponent {
    init(color: ProjectColor.AppereanceColor) {
        let colorCard =
            Div("card-group") {
                color.colorCards
            }
        super.init(colorCard)
    }
    
    init(colorCards: [ColorCard]) {
        let colorCard =
            Div("card-group") {
                colorCards
            }
        super.init(colorCard)
    }
}

private extension ProjectColor.AppereanceColor {
    var colorCards: [ColorCard] {
        switch self {
        case .any(let color):
            return [ColorCard(color: color, isLight: true), ColorCard(color: color, isLight: false)]
            
        case .anyDark(let light, let dark):
            return [ColorCard(color: light, isLight: true), ColorCard(color: dark, isLight: false)]
        }
    }
}

private extension CSSColor {
    static var black: CSSColor {
        CSSColor("#000000")
    }
    static var white: CSSColor {
        CSSColor("#FFFFFF")
    }
}

private class ColorCard: HTMLComponent {
    init(color: ProjectColor.Color, isLight: Bool) {
        let hex = color.hex ?? ""
        let colorCard = Div() {
            Div { Header(.h6, text: hex, cssClass: "card-text") }
                .backgroundColor(.white)
        }
        .width(110)
        .height(110)
        .margin(top: 0, right: isLight ? 0 : 50, bottom: 0, left: isLight ? 50 : 0, .px)
        .backgroundColor(CSSColor(r: color.rgb.r, g: color.rgb.g, b: color.rgb.b, a: color.alpha))
        
        let card = Div { colorCard }.backgroundColor(isLight ? .white : .white)
        super.init(card)
    }
    
    init(system: String, hex: String?, alpha: Float, isLight: Bool) {
        var color: CSSColor = .white
        if let hex = hex {
            color = CSSColor(hex)
        }
        let card =
            Div() {
                Div() {
                    Div(children: [
                        Div { Header(.h6, text: "System:", cssClass: "card-text") },
                        Div {
                            Paragraph("card-text", attributes: [:]) {
                                return RawHTML("\(system) alpha\(alpha)")
                            }
                        }
                    ])
                }
                .width(110)
                .height(110)
                .backgroundColor(color)
                .margin(top: 0, right: isLight ? 0 : 50, bottom: 0, left: isLight ? 50 : 0, .px)
            }
            .backgroundColor(isLight ? .white : .white)
        super.init(card)
    }
}
