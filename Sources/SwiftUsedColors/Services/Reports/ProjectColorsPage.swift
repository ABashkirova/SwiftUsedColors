//
//  Created by Alexandra Bashkirova on 05.08.2021.
//

import Foundation
import HyperSwift

class ProjectColorsPage {
    private let title: String
    private let head: Head
    private let colors: [ProjectColor]
    
    init(colors: [ProjectColor]) {
        let title = "Project Colors"
        self.title = title
        self.head = Head(title: title)
        self.colors = colors
    }
    
    func render() -> String {
        let body = Div("container") {
            Div("row row-cols-1") {
                colors.map { color in
                    Div("col") {
                        color.infoCard
                    }
                }
            }
        }
        .display(.grid)
        .overflow(.scroll)
        return """
        <!DOCTYPE html>
        <html lang="en">
           \(head.render())
           <body style="margin: 0; background-color: #FFFFFF;">
               \(body.render())
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj" crossorigin="anonymous"></script>
           </body>
        </html>
        """
    }
}

public class Head {
    let title: String
    
    init(title: String) {
        self.title = title
    }
    
    func render() -> String {
        """
        <head>
            <!-- Required meta tags -->
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">

            <!-- Bootstrap CSS -->
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We" crossorigin="anonymous">

            <title>\(title)</title>
            <meta name="description" content="Colors generated by SUC">
        </head>
        """
    }
}

private extension ProjectColor {
    var infoCard: HTMLComponent {
        return Div("card mb-4") {
            Div("row g-0", id: nil, attributes: [:]) {
                [colorBlock, namesAndKeysBlock, filesBlock, badgesBlock]
            }
        }
    }
    
    private var badgesBlock: HTMLElement {
        let badges: [HTMLElement] = [assetBadge, unusedBadge, xibBadge, codeBadge, dublicateBadge].compactMap { $0 }
        return Div(cssClass: "col-md-1 align-self-center", children: badges)
    }
    
    private var namesAndKeysBlock: HTMLElement {
        return Div("col-md-3") {
            Div(cssClass: "card-body", id: nil, attributes: [:], children: [
                Header(.h6, text: "Names:", cssClass: "card-title", attributes: [:]),
                namesComponent,
                keysComponent
            ].compactMap { $0 })
        }
    }
    
    private var colorBlock: HTMLComponent {
        return Div("col-sm-3 align-self-center") {
            colorRepresentation?.colorsCard ?? Div()
        }
    }
    
    private var filesBlock: HTMLComponent {
        return Div("col-md-3") {
            Div(cssClass: "card-body", id: nil, attributes: [:], children: [
                Header(.h6, text: "Files:", cssClass: "card-title", attributes: [:]),
                filesComponent
            ])
        }
    }
    
    private var namesComponent: HTMLComponent {
        let namesComponent: HTMLComponent
        if let names = names, !names.isEmpty {
            namesComponent = Paragraph("card-text") {
                Small { names.filter { !$0.contains("#") }.joined(separator: ", ") }
            }
        }
        else {
            namesComponent = Paragraph(cssClass: "card-text", " – ")
        }
        return namesComponent
    }
    
    private var keysComponent: HTMLComponent? {
        var keysComponent: HTMLComponent?
        if let keys = keys, !keys.isEmpty {
            keysComponent = Div {
                Header(.h6, text: "Keys:", cssClass: "card-title", attributes: [:])
                Paragraph("card-text") {
                    Small { keys.joined(separator: ", ") }
                }
            }
        }
        return keysComponent
    }
    
    private var filesComponent: HTMLComponent {
        let filesComponent: HTMLComponent
        if let usedInFiles = usedInFiles, !usedInFiles.isEmpty {
            filesComponent = Paragraph("card-text") {
                Small { usedInFiles.map { $0.lastComponent }.joined(separator: ", ") }
            }
        }
        else {
            filesComponent = Paragraph(cssClass: "card-text", " – ")
        }
        return filesComponent
    }
    
    private var assetBadge: HTMLElement? {
        guard isAsset else {
            return nil
        }
        return ColorBadge("In Asset", type: .success).element
    }
    
    private var unusedBadge: HTMLElement? {
        guard isUnused else {
            return nil
        }
        return ColorBadge("Unused", type: .danger).element
    }
    
    private var xibBadge: HTMLElement? {
        guard isUsedInXib else {
            return nil
        }
        return ColorBadge("In Xib", type: .warning).element
    }
    
    private var codeBadge: HTMLElement? {
        guard isUsedInCode else {
            return nil
        }
        return ColorBadge("In Code", type: .warning).element
    }
    
    private var dublicateBadge: HTMLElement? {
        guard isDuplicate else {
            return nil
        }
        return ColorBadge("Dublicate", type: .danger).element
    }
}

private class ColorBadge {
    enum BadgeType: String {
        case success
        case danger
        case warning
    }
    
    let element: RawHTML
    
    init(_ text: String, type: BadgeType) {
        self.element = RawHTML("<span class=\"badge rounded-pill bg-\(type.rawValue)\">\(text)</span>")
    }
}

private extension ProjectColor.ColorRepresentation {
    var colorsCard: AppereanceColorCard {
        switch self {
        case .asset(let color):
            return AppereanceColorCard(color: color)
        
        case .custom(let color):
            return AppereanceColorCard(
                colorCards: [
                    ColorCard(color: color, isLight: true),
                    ColorCard(color: color, isLight: false)
                ]
            )
        case .system(let name, let alpha):
            return AppereanceColorCard(
                colorCards: [
                    ColorCard(system: name, hex: hex(isLightMode: true), alpha: alpha, isLight: true),
                    ColorCard(system: name, hex: hex(isLightMode: false), alpha: alpha,  isLight: false)
                ]
            )
        }
    }
}

private class AppereanceColorCard: HTMLComponent {
    init(color: ProjectColor.AppereanceColor) {
        let colorCard =
            Div("card-group") {
                color.colorCards
            }
        super.init(colorCard)
    }
    
    init(colorCards: [ColorCard]) {
        let colorCard =
            Div("card-group") {
                colorCards
            }
        super.init(colorCard)
    }
}

private extension ProjectColor.AppereanceColor {
    var colorCards: [ColorCard] {
        switch self {
        case .any(let color):
            return [ColorCard(color: color, isLight: true), ColorCard(color: color, isLight: false)]
            
        case .anyDark(let light, let dark):
            return [ColorCard(color: light, isLight: true), ColorCard(color: dark, isLight: false)]
        }
    }
}

private extension CSSColor {
    static var black: CSSColor {
        CSSColor("#000000")
    }
    static var white: CSSColor {
        CSSColor("#FFFFFF")
    }
}

private class ColorCard: HTMLComponent {
    init(color: ProjectColor.Color, isLight: Bool) {
        let hex = color.hex ?? ""
        let colorCard = Div() {
            Div { Header(.h6, text: hex, cssClass: "card-text") }
                .backgroundColor(.white)
        }
        .width(110)
        .height(110)
        .backgroundColor(CSSColor(r: color.rgb.r, g: color.rgb.g, b: color.rgb.b, a: color.alpha))
        
        let card = Div { colorCard }.backgroundColor(isLight ? .white : .white)
        super.init(card)
    }
    
    init(system: String, hex: String?, alpha: Float, isLight: Bool) {
        var color: CSSColor = .white
        if let hex = hex {
            color = CSSColor(hex)
        }
        let card =
            Div() {
                Div() {
                    Div(children: [
                        Div { Header(.h6, text: "System:", cssClass: "card-text") },
                        Div {
                            Paragraph("card-text", attributes: [:]) {
                                return RawHTML("\(system) alpha\(alpha)")
                            }
                        }
                    ])
                }
                .width(110)
                .height(110)
                .backgroundColor(color)
            }
            .backgroundColor(isLight ? .white : .white)
        super.init(card)
    }
}
